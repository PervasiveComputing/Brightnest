<!DOCTYPE html>
<% layout('layout') -%>


<div class="row">
	<div class="large-12 columns">
		<h2>Records</h2>
		<p>Here you can watch the different values stored for the selected sensor</p>
		<hr />

		<a href="#" class="button tiny" data-dropdown="drop">Change Sensor</a> 
		<ul id="drop" class="tiny f-dropdown" data-dropdown-content> 
		</ul>

	</div>
</div>

<div class="row">
	<div class="large-12 columns">
		<div id="chartContainer"></div>
	</div>
</div>

<script type="text/javascript" src="script/canvasjs-1.3.0/canvasjs.min.js"></script>

<script type="text/javascript">
var sensors, timer;
var pseudoCanvasJSData = [];

$(document).ready(function () {
	$.ajax({
		url : "api/sensors",
		success : function (html) {
			if (html) {
				sensors = JSON.parse(html).sensors;
				
				// Adding list to view:
				for (var i = 0; i < sensors.length; i++) {
					sensors[i].timeLastUpdate = new Date(0);
					$('#drop').append('<li><a href="#'+ sensors[i].name +'" onclick="clearTimeout(timer); loadMeasures(sensors['+i+']);">'+ sensors[i].name +'</a></li>');
				}
				
				// Loading data from the 1st retrieved sensor:
				loadMeasures(sensors[0]);
			}
		}
	});
});
  
function loadMeasures(sensor) {
	var now = new Date();
	var url = "api/sensor/"+sensor.id+"/measures/after/"+sensor.timeLastUpdate.getTime();
	console.log('<Request> GET ' + url);
	$.ajax({
		url : url,
		success : function (html) {
			if (html) {
				var measures = JSON.parse(html).measures;
				var sensorId = sensorId;
				if (!pseudoCanvasJSData[sensorId]) { pseudoCanvasJSData[sensorId] = []; }
				
				for (var i = 0; i < measures.length; i++) {
					if (!pseudoCanvasJSData[sensorId][measures[i].measureType]) {
						pseudoCanvasJSData[sensorId][measures[i].measureType] = {
							legendText : measures[i].measureType,
							type : 'line',
							showInLegend: true,
							label: measures[i].measureType,
							dataPoints : []
						};
					}
					pseudoCanvasJSData[sensorId][measures[i].measureType].dataPoints.push({x: new Date(measures[i].time.replace(" ", "T")), y: measures[i].value});
				}
				
				var canvasJSData = [];
				for (var i in pseudoCanvasJSData[sensorId]) {
					canvasJSData.push(pseudoCanvasJSData[sensorId][i]);
				}
				
				var chart = new CanvasJS.Chart("chartContainer", {
						title:{
							text: sensor.name            
						},
						axisX:{
							title: "Timeline"
						},
						axisY:{
							title: "Values"
						},
						data: canvasJSData
					});
				chart.render();
				sensor.timeLastUpdate = now;
				timer = setTimeout(function(){loadMeasures(sensor);}, 1000);
			}
		}
	});
}
</script>
